# -*- coding: utf-8 -*-
"""Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oYNLXYS9Bi76LSQm2erKgHJIhlQODG3p
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
import tensorflow as tf
import matplotlib.pyplot as plt
import os
import random
import shutil
from sklearn.model_selection import train_test_split

directory = '/content/drive/MyDrive/Dataset'

# Loading images into a dataset
ds = tf.keras.preprocessing.image_dataset_from_directory(
    directory=directory,
    labels='inferred',
    label_mode='int',
    batch_size=32,
    image_size=(256, 256),
    validation_split=0.2,
    subset='training',
    seed=42
)

# Spliting into training and testing sets
train_ds = ds
test_ds = tf.keras.preprocessing.image_dataset_from_directory(
    directory=directory,
    labels='inferred',
    label_mode='int',
    batch_size=32,
    image_size=(256, 256),
    validation_split=0.2,
    subset='validation',
    seed=42
)

class_names = ds.class_names
len(class_names)

# Displaying a few sample images from train
plt.figure(figsize=(8, 8))
for images, labels in train_ds.take(1):
    for i in range(3):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(class_names[labels[i]])
        plt.axis("off")
plt.show()

# Displaying a few sample images from test
plt.figure(figsize=(8, 8))
for images, labels in test_ds.take(1):
    for i in range(3):
        ax = plt.subplot(3, 3, i + 1)
        plt.imshow(images[i].numpy().astype("uint8"))
        plt.title(class_names[labels[i]])
        plt.axis("off")
plt.show()

input_shape = (256, 256, 3)

# Createing the base model
base_model = tf.keras.applications.ResNet50(
    include_top=False,
    weights='imagenet',
    input_shape=input_shape
)
base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    layers.Flatten(),
    layers.Dense(79, activation='softmax')
])

# Compiling the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

#Training
model.fit(train_ds,
          validation_data=test_ds,
          epochs=1)

#Evaluating
model.evaluate(test_ds)